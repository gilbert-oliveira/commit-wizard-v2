name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  BUN_VERSION: '1.2.13'

jobs:
  # Testes e Qualidade de C√≥digo
  test:
    name: Testes e Qualidade
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache depend√™ncias
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Instalar depend√™ncias
        run: bun install

      - name: Executar testes
        run: bun test

      - name: Executar testes com cobertura
        run: bun run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Build do projeto
        run: bun run build

      - name: Verificar build
        run: |
          if [ -f "dist/commit-wizard.js" ]; then
            echo "‚úÖ Build gerado com sucesso"
            ls -la dist/
          else
            echo "‚ùå Build falhou"
            exit 1
          fi

  # Linting e Formata√ß√£o
  lint:
    name: Linting e Formata√ß√£o
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Instalar depend√™ncias
        run: bun install

      - name: Verificar estrutura do c√≥digo
        run: |
          echo "üîç Verificando estrutura do c√≥digo..."
          echo "üìÅ Arquivos TypeScript:"
          find src/ -name "*.ts" | wc -l
          echo "üìÅ Arquivos de teste:"
          find . -name "*.test.ts" | wc -l
          echo "‚úÖ Estrutura do c√≥digo verificada"

      - name: Verificar tipos TypeScript
        run: bun run tsc --noEmit

  # Testes de Integra√ß√£o
  integration:
    name: Testes de Integra√ß√£o
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Instalar depend√™ncias
        run: bun install

      - name: Configurar Git para testes
        run: |
          git config --global user.name "CI Bot"
          git config --global user.email "ci@example.com"

      - name: Executar testes de integra√ß√£o
        run: bun test tests/integration.test.ts

      - name: Executar testes Smart Split
        run: bun test tests/smart-split.test.ts

  # Build e Teste de Instala√ß√£o
  build-test:
    name: Build e Teste de Instala√ß√£o
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Instalar depend√™ncias
        run: bun install

      - name: Build do projeto
        run: bun run build

      - name: Testar instala√ß√£o local
        run: |
          # Simular instala√ß√£o local
          bun run build
          chmod +x dist/commit-wizard.js

          # Testar execu√ß√£o b√°sica
          echo "Testando execu√ß√£o do CLI..."
          timeout 10s bun run dist/commit-wizard.js --help || true

      - name: Verificar arquivos de distribui√ß√£o
        run: |
          echo "üì¶ Arquivos de distribui√ß√£o:"
          ls -la dist/
          echo ""
          echo "üìÑ Conte√∫do do package.json:"
          cat package.json | jq '.files'

  # Publica√ß√£o no NPM (apenas em releases)
  publish:
    name: Publicar no NPM
    runs-on: ubuntu-latest
    needs: [test, lint, integration, build-test]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Instalar depend√™ncias
        run: bun install

      - name: Build do projeto
        run: bun run build

      - name: Configurar NPM
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm config set access public

      - name: Publicar no NPM
        run: npm publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Criar Release no GitHub
  release:
    name: Criar Release
    runs-on: ubuntu-latest
    needs: [test, lint, integration, build-test]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Build do projeto
        run: bun run build

      - name: Criar arquivo de distribui√ß√£o
        run: |
          mkdir -p release
          cp -r dist/ release/
          cp package.json README.md LICENSE .commit-wizardrc release/
          cd release && tar -czf commit-wizard-${{ github.event.release.tag_name }}.tar.gz *

      - name: Upload assets para release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/commit-wizard-${{ github.event.release.tag_name }}.tar.gz
          asset_name: commit-wizard-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

name: Deploy e Testes de Ambiente

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUN_VERSION: '1.0.0'

jobs:
  # Teste em Ambiente de Desenvolvimento
  test-dev:
    name: Teste em Dev
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Instalar dependências
        run: bun install
        
      - name: Build do projeto
        run: bun run build
        
      - name: Testar CLI em ambiente dev
        run: |
          echo "🧪 Testando CLI em ambiente de desenvolvimento..."
          
          # Testar ajuda
          timeout 5s bun run dist/commit-wizard.js --help || true
          
          # Testar versão
          timeout 5s bun run dist/commit-wizard.js --version || true
          
          # Testar com configuração mínima
          echo '{"openai": {"apiKey": "test-key"}}' > .commit-wizardrc
          timeout 5s bun run dist/commit-wizard.js --dry-run || true
          
          echo "✅ Testes de desenvolvimento concluídos"

  # Teste em Ambiente de Staging
  test-staging:
    name: Teste em Staging
    runs-on: ubuntu-latest
    needs: test-dev
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Instalar dependências
        run: bun install
        
      - name: Build do projeto
        run: bun run build
        
      - name: Simular instalação global
        run: |
          echo "🚀 Simulando instalação global em staging..."
          
          # Criar diretório de instalação global
          sudo mkdir -p /usr/local/bin
          sudo cp dist/commit-wizard.js /usr/local/bin/commit-wizard
          sudo chmod +x /usr/local/bin/commit-wizard
          
          # Testar execução global
          commit-wizard --help || true
          commit-wizard --version || true
          
          echo "✅ Testes de staging concluídos"

  # Deploy para Produção (apenas em main)
  deploy-prod:
    name: Deploy para Produção
    runs-on: ubuntu-latest
    needs: [test-dev, test-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Instalar dependências
        run: bun install
        
      - name: Build do projeto
        run: bun run build
        
      - name: Verificar qualidade do build
        run: |
          echo "🔍 Verificando qualidade do build..."
          
          # Verificar se o arquivo principal existe
          if [ ! -f "dist/commit-wizard.js" ]; then
            echo "❌ Arquivo principal não encontrado"
            exit 1
          fi
          
          # Verificar permissões
          chmod +x dist/commit-wizard.js
          
          # Verificar tamanho
          echo "📦 Tamanho do build:"
          ls -lh dist/
          
          # Testar execução básica
          timeout 10s bun run dist/commit-wizard.js --help || true
          
          echo "✅ Build verificado com sucesso"
          
      - name: Preparar para publicação
        run: |
          echo "📦 Preparando pacote para publicação..."
          
          # Criar arquivo de distribuição
          mkdir -p release
          cp -r dist/ release/
          cp package.json README.md LICENSE .commit-wizardrc release/
          
          # Criar arquivo de checksum
          cd release && sha256sum * > checksums.txt
          
          echo "✅ Pacote preparado"
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: commit-wizard-release
          path: release/
          retention-days: 30

  # Teste de Compatibilidade
  compatibility:
    name: Teste de Compatibilidade
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 21]
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Instalar dependências
        run: bun install
        
      - name: Executar testes básicos
        run: |
          echo "🧪 Testando compatibilidade com Node.js ${{ matrix.node-version }} no ${{ matrix.os }}"
          bun test --reporter=verbose
          
      - name: Testar build
        run: |
          echo "🔨 Testando build..."
          bun run build
          
          # Verificar se o build funciona
          if [ -f "dist/commit-wizard.js" ]; then
            echo "✅ Build bem-sucedido"
          else
            echo "❌ Build falhou"
            exit 1
          fi

  # Teste de Performance
  performance-test:
    name: Teste de Performance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Instalar dependências
        run: bun install
        
      - name: Medir tempo de build
        run: |
          echo "⚡ Medindo performance do build..."
          
          # Medir tempo de build
          start_time=$(date +%s)
          bun run build
          end_time=$(date +%s)
          
          build_time=$((end_time - start_time))
          echo "🕐 Tempo de build: ${build_time} segundos"
          
          # Verificar se está dentro do limite aceitável (30 segundos)
          if [ $build_time -gt 30 ]; then
            echo "⚠️  Build está lento (${build_time}s > 30s)"
          else
            echo "✅ Build está dentro do limite aceitável"
          fi
          
      - name: Medir tempo de testes
        run: |
          echo "🧪 Medindo performance dos testes..."
          
          start_time=$(date +%s)
          bun test
          end_time=$(date +%s)
          
          test_time=$((end_time - start_time))
          echo "🕐 Tempo de testes: ${test_time} segundos"
          
          # Verificar se está dentro do limite aceitável (60 segundos)
          if [ $test_time -gt 60 ]; then
            echo "⚠️  Testes estão lentos (${test_time}s > 60s)"
          else
            echo "✅ Testes estão dentro do limite aceitável"
          fi 